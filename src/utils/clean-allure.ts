/*
 * –û—á–∏—Å—Ç–∫–∞ –ø–∞–ø–æ–∫ allure-results –∏ '-p' –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Ç–µ—Å—Ç–æ–≤.
 * TypeScript –≤–µ—Ä—Å–∏—è. –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∏–∑ scripts/ –≤ src/utils.
 */
import fs from 'fs';
import path from 'path';
import { rimraf } from 'rimraf';

// –ü—É—Ç—å –∫ –∫–æ—Ä–Ω—é —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–ø–æ–¥–Ω–∏–º–∞–µ–º—Å—è –Ω–∞ –¥–≤–∞ —É—Ä–æ–≤–Ω—è –æ—Ç src/utils)
const ROOT = path.resolve(__dirname, '..', '..');
const ALLURE_RESULTS = path.join(ROOT, 'allure-results');
const MINUS_P_DIR = path.join(ROOT, '-p');

function removeIfExists(dirPath: string, label: string) {
  if (fs.existsSync(dirPath)) {
    rimraf.sync(dirPath);
    console.log(`üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞: ${label}`);
  }
}

function ensureDir(dirPath: string, label: string) {
  fs.mkdirSync(dirPath, { recursive: true });
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: ${label}`);
}

export function cleanAllure() {
  removeIfExists(ALLURE_RESULTS, 'allure-results');
  removeIfExists(MINUS_P_DIR, '-p');
  ensureDir(ALLURE_RESULTS, 'allure-results');

  if (process.env.CI) {
    console.log('‚ÑπÔ∏è  –†–µ–∂–∏–º CI: —Ç–æ–ª—å–∫–æ Node.js, –±–µ–∑ mkdir -p (–ø–æ–≤–µ–¥–µ–Ω–∏–µ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ)');
  }
}

if (require.main === module) {
  try {
    cleanAllure();
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ Allure –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π', err);
    process.exit(1);
  }
}
