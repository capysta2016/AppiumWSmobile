pipeline {
    agent any  // –ê–≥–µ–Ω—Ç —Å Docker

    stages {
        stage('Build Docker Image') {
            steps {
                script {
                    dockerImage = docker.build("appium-tests:${env.BUILD_ID}")
                }
            }
        }

        stage('Run Tests in Docker') {
            steps {
                script {
                    dockerImage.inside('--privileged') {
                        // –≠–º—É–ª—è—Ç–æ—Ä –∏ —Ç–µ—Å—Ç—ã –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è –≤ CMD Dockerfile
                        sh 'echo "Tests running in container"'
                    }
                }
            }
        }

        stage('Publish Reports') {
            steps {
                script {
                    dockerImage.inside {
                        allure includeProperties: false, jdk: '', results: [[path: 'allure-results']]
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                dockerImage.inside {
                    archiveArtifacts artifacts: 'allure-results/**', allowEmptyArchive: true
                }
            }
        }
        // --- –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–∞ –≤ Telegram ---
        def reportUrl = "${env.BUILD_URL}allure/"
    def telegramBotToken = "8159139872:AAFpWsYfMKZyDpvNCeLoPAYHwtxZARB5hNU"
    def telegramChatId = "-4929513612"
        def stats = [total: 0, passed: 0, failed: 0, skipped: 0, retried_passed: 0, retried_failed: 0]
        dir('allure-results') {
            def files = findFiles(glob: '**/*-result.json')
            def testCases = [:]
            files.each { file ->
                def content = readJSON file: file.path
                def testName = content.name ?: content.fullName ?: "Unknown"
                if (!testCases.containsKey(testName)) {
                    testCases[testName] = []
                }
                testCases[testName] << content
            }
            testCases.each { testName, results ->
                stats.total++
                def lastResult = results.last()
                if (results.size() == 1) {
                    switch(lastResult.status?.toLowerCase()) {
                        case 'passed': stats.passed++; break
                        case 'failed': stats.failed++; break
                        case 'skipped': stats.skipped++; break
                    }
                } else {
                    if (lastResult.status?.toLowerCase() == 'passed') {
                        stats.retried_passed++
                    } else {
                        stats.retried_failed++
                    }
                }
            }
            stats.passed += stats.retried_passed
            stats.failed += stats.retried_failed
            stats.retries = stats.retried_passed + stats.retried_failed
        }
        def successRate = stats.total > 0 ? (stats.passed / stats.total) * 100 as int : 0
        def barLength = 20
        def filledBars = Math.round((successRate as double) / 5)
        def progressBar = "${'‚ñà' * filledBars}${'‚ñë' * (barLength - filledBars)}"
        def statusData = [
            'SUCCESS': ['–£–°–ü–ï–®–ù–û', '‚úÖ', 'üü¢'],
            'FAILURE': ['–ü–†–û–í–ê–õ–ï–ù–û', '‚ùå', 'üî¥'],
            'UNSTABLE': ['–ù–ï–°–¢–ê–ë–ò–õ–¨–ù–û', '‚ö†Ô∏è', 'üü°'],
            'ABORTED': ['–û–¢–ú–ï–ù–ï–ù–û', '‚èπÔ∏è', '‚ö™']
        ]
        def (statusText, statusIcon, statusColor) = statusData[currentBuild.currentResult] ?: ['–ù–ï–ò–ó–í–ï–°–¢–ù–û', '‚ùì', '‚ö´']
        def message = """
${statusColor} *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≤—Ç–æ—Ç–µ—Å—Ç–æ–≤* ${statusIcon}

üìå *–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*
   ‚Ä¢ *–ü—Ä–æ–µ–∫—Ç:* ${env.JOB_NAME}
   ‚Ä¢ *–°–±–æ—Ä–∫–∞:* #${env.BUILD_NUMBER}
   ‚Ä¢ *–°—Ç–∞—Ç—É—Å:* _${statusText}_
   ‚Ä¢ *–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* ${currentBuild.durationString.replace(' and counting', '')}

üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:*
`–£—Å–ø–µ—à–Ω—ã–µ    : ${String.format("%3d", stats.passed)} (–ø–æ–≤—Ç–æ—Ä: ${String.format("%2d", stats.retried_passed)})`
`–ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ : ${String.format("%3d", stats.failed)} (–ø–æ–≤—Ç–æ—Ä: ${String.format("%2d", stats.retried_failed)})`
`–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ : ${String.format("%3d", stats.skipped)}`
`–ü–æ–≤—Ç–æ—Ä–Ω—ã–µ   : ${String.format("%3d", stats.retries)}`
`–í—Å–µ–≥–æ       : ${String.format("%3d", stats.total)}`

üìÇ *–û—Ç—á–µ—Ç—ã:*
   ‚Ä¢ [Allure Report](${reportUrl})
   ‚Ä¢ [Jenkins Build](${env.BUILD_URL})
"""
        def encodedMessage = java.net.URLEncoder.encode(message, "UTF-8")
        sh """
            curl -s -X POST \
            "https://api.telegram.org/bot${telegramBotToken}/sendMessage"  \
            -d "chat_id=${telegramChatId}" \
            -d "text=${encodedMessage}" \
            -d "parse_mode=Markdown" \
            -d "disable_web_page_preview=false"
        """
    }
        failure {
            echo 'Tests failed'
        }
    }
}